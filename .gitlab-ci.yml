image: docker:latest

services:
  - docker:dind

variables:
  AZURE_WEBAPP_NAME: "platform-chatbot"
  AZURE_RESOURCE_GROUP: "game-analytics-rg"
  DOCKER_REGISTRY: "gameanalyticsregistry.azurecr.io"
  IMAGE_NAME: "platform-chatbot"
  IMAGE_TAG: $CI_COMMIT_SHA
  STORAGE_ACCOUNT_NAME: "platformchatbotst"

  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"

stages:
  - build
  - deploy

build:
  stage: build
  before_script:
    - apk add --no-cache py3-pip
  script:
    - docker login $DOCKER_REGISTRY -u $AZURE_REGISTRY_USERNAME -p $AZURE_REGISTRY_PASSWORD
    - docker build -t $DOCKER_REGISTRY/$IMAGE_NAME:$IMAGE_TAG .
    - docker push $DOCKER_REGISTRY/$IMAGE_NAME:$IMAGE_TAG
  only:
    - main

deploy:
  stage: deploy
  image: python:3.9
  before_script:
    - apt-get update
    - apt-get install -y curl
    - curl -sL https://aka.ms/InstallAzureCLIDeb | bash
  script:
    - echo "Deploying to Azure App Service..."

    # Login to Azure
    - az login --service-principal --username "$AZURE_SP_ID" --password "$AZURE_SP_PASSWORD" --tenant "$AZURE_TENANT_ID"

    # Create storage account with retry logic
    - |
      echo "Creating storage account..."
      for i in {1..5}; do
        az storage account create \
          --name "$STORAGE_ACCOUNT_NAME" \
          --resource-group "$AZURE_RESOURCE_GROUP" \
          --location "westeurope" \
          --sku Standard_LRS \
          --kind StorageV2 \
          --enable-large-file-share \
          && break || sleep 30
      done

    # Get storage account key
    - |
      echo "Getting storage account key..."
      STORAGE_KEY=$(az storage account keys list \
        --resource-group "$AZURE_RESOURCE_GROUP" \
        --account-name "$STORAGE_ACCOUNT_NAME" \
        --query '[0].value' -o tsv)

    # Create file share
    - |
      echo "Creating file share..."
      az storage share create \
        --account-name "$STORAGE_ACCOUNT_NAME" \
        --account-key "$STORAGE_KEY" \
        --name "chromadb" \
        --quota 1024 \
        || true

    # Configure web app to use container
    - |
      az webapp config container set \
        --resource-group "$AZURE_RESOURCE_GROUP" \
        --name "$AZURE_WEBAPP_NAME" \
        --container-image-name "$DOCKER_REGISTRY/$IMAGE_NAME:$IMAGE_TAG" \
        --container-registry-url "https://$DOCKER_REGISTRY" \
        --container-registry-user "$AZURE_REGISTRY_USERNAME" \
        --container-registry-password "$AZURE_REGISTRY_PASSWORD"

    # Configure storage mount
    - |
      echo "Configuring storage mount..."
      az webapp config storage-account add \
        --resource-group "$AZURE_RESOURCE_GROUP" \
        --name "$AZURE_WEBAPP_NAME" \
        --custom-id "chromadb" \
        --storage-type "AzureFiles" \
        --share-name "chromadb" \
        --mount-path "/app/chroma" \
        --account-name "$STORAGE_ACCOUNT_NAME" \
        --access-key "$STORAGE_KEY"

    # Set the startup command
    - |
      az webapp config set \
        --resource-group "$AZURE_RESOURCE_GROUP" \
        --name "$AZURE_WEBAPP_NAME" \
        --generic-configurations '{"maxStartupTime": "1800"}' \
        --number-of-workers 1 \
        --startup-file "/app/startup.sh"

    # Configure app settings
    - |
      az webapp config appsettings set \
        --resource-group "$AZURE_RESOURCE_GROUP" \
        --name "$AZURE_WEBAPP_NAME" \
        --settings \
          WEBSITES_PORT=8000 \
          WEBSITES_CONTAINER_START_TIME_LIMIT=1800 \
          WEBSITES_ENABLE_APP_SERVICE_STORAGE=true \
          LLAMA_API_KEY="$LLAMA_API_KEY" \
          DOCKER_ENABLE_CI=true \
          DOCKER_CUSTOM_IMAGE_NAME="" \
          GUNICORN_CMD_ARGS="--log-level debug" \
          DATA_DIR="/app/data" \
          CHROMA_PATH="/app/chroma" \
          PYTHONUNBUFFERED=1 \
          STORAGE_ACCOUNT_NAME="$STORAGE_ACCOUNT_NAME" \
          STORAGE_ACCOUNT_KEY="$STORAGE_KEY"

    # Enable container logging
    - |
      az webapp log config \
        --resource-group "$AZURE_RESOURCE_GROUP" \
        --name "$AZURE_WEBAPP_NAME" \
        --docker-container-logging filesystem

  environment:
    name: production
    url: https://$AZURE_WEBAPP_NAME.azurewebsites.net
  only:
    - main